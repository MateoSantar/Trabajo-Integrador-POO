package views;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.table.DefaultTableModel;
import models.Client;
import models.ClientDao;


/**
 * Ventana encargada de agregar un nuevo cliente al sistema.
 * <p>
 * Esta vista permite ingresar los datos de un cliente (nombre, apellido y teléfono)
 * y guardarlos en la base de datos mediante {@link ClientDao}. 
 * Además, comunica el nuevo cliente a la vista {@link AddReservationView} para su selección.
 * </p>
 * 
 * <p><b>Nota:</b> Parte del código fue generado automáticamente por NetBeans GUI Builder, 
 * por lo tanto no debe modificarse manualmente las secciones delimitadas por comentarios
 * 
 * 
 * @author Pedro Mendoza
 */

public class AddClientView extends javax.swing.JFrame {

    /**
     * Modelo de tabla utilizado por la vista principal para mostrar los clientes.
     */
    private DefaultTableModel table;

    /**
     * Referencia a la vista de reserva desde la que se abrió este formulario.
     */
    private final AddReservationView arv;

    /**
     * Objeto de acceso a datos para clientes.
     */
    private final ClientDao clientDao;

    /**
     * Crea una nueva instancia de la vista para agregar clientes.
     *
     * @param clientDao instancia de {@link ClientDao} utilizada para guardar los clientes.
     * @param arv referencia a la vista {@link AddReservationView} que invocó este formulario.
     * @param table modelo de tabla donde se reflejan los cambios de clientes.
     */
    public AddClientView(ClientDao clientDao, AddReservationView arv, DefaultTableModel table) {
        initComponents();
        this.table = table;
        this.arv = arv;
        this.clientDao = clientDao;
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        setLocation(1350,500);
        addWindowClosingEvent();
        

    }
    
    
    /**
     * Agrega un evento de cierre de ventana personalizado.
     * <p>
     * Cuando se intenta cerrar la ventana, se vuelve a habilitar la vista de reserva 
     * y se libera el recurso de esta ventana.
     * </p>
     */
    private void addWindowClosingEvent() {
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                arv.setEnabled(true);
                dispose();
            
            }
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        surNameTxtFlied = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nameTxtField = new javax.swing.JTextField();
        phoneTxtField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        addClientButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jLabel1.setText("Nombre:");

        jLabel2.setText("Apellido");

        jLabel3.setText("Telefono:");

        addClientButton.setText("Añadir ");
        addClientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClientButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(nameTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .addComponent(surNameTxtFlied)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2))
                    .addComponent(jLabel3)
                    .addComponent(phoneTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .addComponent(addClientButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(surNameTxtFlied, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(phoneTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(addClientButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    
    /**
     * Evento ejecutado al presionar el botón "Añadir".
     * <p>
     * Valida los campos del formulario, crea un nuevo objeto {@link Client} y lo guarda en la base de datos
     * utilizando {@link ClientDao#save(models.Client)}. Finalmente, actualiza la vista de reserva y cierra la ventana.
     * </p>
     * 
     * @param evt evento de acción generado por el botón.
     */
    private void addClientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClientButtonActionPerformed
        String name = nameTxtField.getText();
        String surname = surNameTxtFlied.getText();
        String phone = phoneTxtField.getText();
        if (name != null&& surname != null && phone != null) {
            clientDao.save(new Client(-1,name+" "+surname,phone));
        }
        arv.setClientName(name +" "+surname);
        arv.setEnabled(true);
        this.dispose();
    }//GEN-LAST:event_addClientButtonActionPerformed
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addClientButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField nameTxtField;
    private javax.swing.JTextField phoneTxtField;
    private javax.swing.JTextField surNameTxtFlied;
    // End of variables declaration//GEN-END:variables

}
