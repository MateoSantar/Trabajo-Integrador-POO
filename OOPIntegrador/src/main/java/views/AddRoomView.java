package views;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.HashMap;
import models.Room;
import models.RoomDao;
import models.Utils;

/**
 * Ventana para agregar o editar habitaciones dentro del sistema de gestión de reservas.
 * Permite crear nuevas habitaciones o modificar existentes, actualizando la vista
 * principal de administración de habitaciones.
 *
 * <p>Esta clase puede ser instanciada en dos modos:
 * <ul>
 *   <li><b>Modo Agregar:</b> Permite añadir una nueva habitación.</li>
 *   <li><b>Modo Editar:</b> Permite modificar una habitación existente.</li>
 * </ul>
 *
 * @author Mateo Santarsiero
 */
public class AddRoomView extends javax.swing.JFrame {

    /** DAO que gestiona las operaciones sobre las habitaciones. */
    private final RoomDao rooms;

    /** Vista principal de administración de habitaciones que invoca esta ventana. */
    private final AdminRoomsView adminRoomView;

    /** Identificador de la habitación en caso de edición. */
    private int editRoomId = -1;

    /** Referencia a la habitación actualmente editada. */
    private Room actualRoom;

    /** Mapa que asocia categorías de habitación con sus números disponibles. */
    private HashMap<String, ArrayList<Integer>> roomNumbers = new HashMap<>();

    /**
     * Constructor para el modo de agregado de una nueva habitación.
     *
     * @param rooms instancia de {@link RoomDao} para realizar operaciones de base de datos.
     * @param arv vista principal de administración de habitaciones.
     * @param roomNumbers mapa que contiene los números de habitación por categoría.
     */

    public AddRoomView(RoomDao rooms, AdminRoomsView arv, HashMap<String, ArrayList<Integer>> roomNumbers) { //Constructor de agregado
        initComponents();
        this.rooms = rooms;
        this.adminRoomView = arv;
        this.roomNumbers = roomNumbers;
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addRoomButton.addActionListener(e -> addRoomActionPerformed());
        addWindowClosingEvent();
        Utils.centerWindow(this);

    }

    /**
     * Constructor para el modo de edición de una habitación existente.
     *
     * @param rooms instancia de {@link RoomDao} para realizar operaciones de base de datos.
     * @param arv vista principal de administración de habitaciones.
     * @param actualRoom habitación actualmente seleccionada para edición.
     * @param roomNumbers mapa que contiene los números de habitación por categoría.
     */
    public AddRoomView(RoomDao rooms, AdminRoomsView arv, Room actualRoom, HashMap<String, ArrayList<Integer>> roomNumbers) { 
        initComponents();
        this.rooms = rooms;
        this.adminRoomView = arv;
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addRoomButton.setText("Aplicar");
        newRoomNumberTxt.setText(String.valueOf(actualRoom.getRoomNumber()));
        newRoomNumberTxt.setEnabled(false);
        newRoomCategoryCombo.setSelectedItem(actualRoom.getCategory());
        newRoomPriceTxt.setText(String.valueOf(actualRoom.getPrice()));
        editRoomId = actualRoom.getID();
        this.actualRoom = actualRoom;
        this.roomNumbers = roomNumbers;
        addRoomButton.addActionListener(e -> editRoomActionPerformed());
        addWindowClosingEvent();
        Utils.centerWindow(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addRoomButton = new javax.swing.JButton();
        newRoomPriceTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        newRoomNumberTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        newRoomCategoryCombo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Room Add");
        setResizable(false);

        addRoomButton.setText("Añadir ");

        jLabel3.setText("Precio");

        jLabel2.setText("Categoría");

        jLabel1.setText("Número");

        newRoomCategoryCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Standard", "Superior", "Suite" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(newRoomPriceTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                        .addComponent(newRoomNumberTxt, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(newRoomCategoryCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, 93, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(3, 3, 3)
                            .addComponent(jLabel2))
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addRoomButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newRoomNumberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newRoomCategoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newRoomPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addRoomButton)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Lógica del botón "Añadir".
     * Valida los campos ingresados, crea una nueva habitación y la persiste en la base de datos.
     * Si la habitación se crea correctamente, actualiza la tabla de la vista principal.
     */
    private void addRoomActionPerformed() {
        if (newRoomNumberTxt.getText().isBlank() || newRoomPriceTxt.getText().isBlank()) {
            Utils.ShowInfo("Complete todos los campos");
            return;
        }
        double price;
        int roomNum;
        try {
            price = Double.parseDouble(newRoomPriceTxt.getText());
            roomNum = Integer.parseInt(newRoomNumberTxt.getText());
        } catch (NumberFormatException ex) {
            Utils.ShowErr("Los campos deben ser numericos", "Excepcion");
            return;
        }
        if (rooms.getAll().stream().anyMatch(r -> r.getRoomNumber() == roomNum)) {
            Utils.ShowInfo("Ya existe una habitacion con el número " + roomNum);
            return;
        }

        Room r = new Room(-1, newRoomCategoryCombo.getSelectedItem().toString(), price, roomNum);
        rooms.save(r);
        adminRoomView.addRoom(r);
        adminRoomView.setEnabled(true);
        this.dispose();
    }

    /**
     * Lógica del botón "Aplicar" cuando se edita una habitación existente.
     * Valida los campos ingresados y actualiza la información en la base de datos.
     * También actualiza la vista principal y los datos asociados a las reservas.
     */
    private void editRoomActionPerformed() {
        double price;
        int roomNum = actualRoom.getRoomNumber();
        if (newRoomPriceTxt.getText().isBlank()) {
            Utils.ShowInfo("Complete todos los campos");
            return;
        }

        try {
            price = Double.parseDouble(newRoomPriceTxt.getText());
        } catch (NumberFormatException ex) {
            Utils.ShowErr("Los campos deben ser numericos", "Excepcion");
            return;
        }
        
        
        Room newRoom = new Room(editRoomId, newRoomCategoryCombo.getSelectedItem().toString(), price, roomNum);
        
        
        rooms.update(actualRoom, newRoom);
        adminRoomView.loadRooms();
        adminRoomView.getAddReservationView().resetRoomNumberHashMap();
        adminRoomView.setEnabled(true);
        this.dispose();
    }

    /**
     * Agrega un evento que maneja el cierre de la ventana.
     * Cuando se cierra, vuelve a habilitar la vista principal.
     */
    private void addWindowClosingEvent() {
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                adminRoomView.setEnabled(true);
                dispose();

            }
        });
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRoomButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox<String> newRoomCategoryCombo;
    private javax.swing.JTextField newRoomNumberTxt;
    private javax.swing.JTextField newRoomPriceTxt;
    // End of variables declaration//GEN-END:variables
}
